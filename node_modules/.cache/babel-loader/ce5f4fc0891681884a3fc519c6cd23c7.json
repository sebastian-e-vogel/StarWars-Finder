{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Desktop/StarWars-Finder/src/components/SearchableList.js\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectCharacter, getMoreCharacters } from \"../redux/actions/PersonajesActions\";\nimport { selectFilm } from \"../redux/actions/PeliculasActions\";\nimport \"./styles.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ReactLoading from \"react-loading\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 536,\n    height: 400\n  },\n  listSection: {\n    backgroundColor: \"inherit\"\n  },\n  ul: {\n    backgroundColor: \"inherit\",\n    padding: 0\n  }\n}));\n\nfunction SearchableList(props) {\n  const [inputText, setInputText] = useState(\"\");\n  const [scrollTop, setScrollTop] = useState(0);\n  const classes = useStyles();\n  const {\n    selectedSection\n  } = props.state.sections;\n  const {\n    next\n  } = props.state.personajes.listPersonajes;\n  const {\n    loading\n  } = props.state.personajes;\n  const charactersResults = props.state.personajes.listPersonajes.results;\n  const filmsResults = props.state.peliculas.listPeliculas.results;\n  const infiniteScroll = useRef();\n\n  if (!charactersResults || !filmsResults) {\n    return React.createElement(\"div\", {\n      className: \"SearchableList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SearchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"TextSectionSelected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \" \", selectedSection.toUpperCase(), \" \")), React.createElement(\"div\", {\n      className: \"inputWithIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      placeholder: \"Buscar\",\n      onChange: e => setInputText(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"ListItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(ReactLoading, {\n      type: \"spin\",\n      color: \"#A9A9A9\",\n      height: 25,\n      width: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })));\n  } else if (selectedSection === \"personajes\") {\n    let filteredCharacters = charactersResults.filter(character => {\n      return character.name.toLowerCase().indexOf(inputText.toLowerCase()) !== -1;\n    });\n\n    function handleSelectCharacter(characterUrl) {\n      let characterId = charactersResults.findIndex(character => character.url === characterUrl);\n      props.selectCharacter(characterId);\n    }\n\n    const loadMoreCharacters = () => {\n      props.getMoreCharacters(next);\n    };\n\n    const onScroll = () => {\n      const scrollList = infiniteScroll.current.scrollTop;\n      setScrollTop(scrollList);\n      let childtHight = infiniteScroll.current.firstElementChild.offsetHeight * charactersResults.length;\n      let parentHight = infiniteScroll.current.offsetHeight;\n\n      if (scrollTop + parentHight > childtHight - 40 && next && !loading) {\n        loadMoreCharacters();\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"SearchableList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SearchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"TextSectionSelected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" \", selectedSection.toUpperCase(), \" \")), React.createElement(\"div\", {\n      className: \"inputWithIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      placeholder: \"Buscar\",\n      onChange: e => setInputText(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), React.createElement(List, {\n      ref: infiniteScroll,\n      component: \"nav\",\n      className: classes.root,\n      onScroll: onScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, filteredCharacters.map(character => React.createElement(ListItem, {\n      button: true,\n      onClick: () => handleSelectCharacter(character.url),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      inset: true,\n      primary: character.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), loading && React.createElement(ReactLoading, {\n      type: \"spin\",\n      color: \"#A9A9A9\",\n      height: 30,\n      width: 30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })));\n  }\n\n  let filteredFilms = filmsResults.filter(film => {\n    return film.title.toLowerCase().indexOf(inputText.toLowerCase()) !== -1;\n  });\n\n  function handleSelectFilm(filmUrl) {\n    let filmId = filmsResults.findIndex(film => film.url === filmUrl);\n    props.selectFilm(filmId);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"SearchableList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"SearchBar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TextSectionSelected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \" \", selectedSection.toUpperCase(), \" \")), React.createElement(\"div\", {\n    className: \"inputWithIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(SearchIcon, {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    placeholder: \"Buscar\",\n    onChange: e => setInputText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))), React.createElement(List, {\n    component: \"nav\",\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, filteredFilms.map(film => React.createElement(ListItem, {\n    button: true,\n    onClick: () => handleSelectFilm(film.url),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    inset: true,\n    primary: film.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectCharacter: characterId => dispatch(selectCharacter(characterId)),\n    getMoreCharacters: nextPage => dispatch(getMoreCharacters(nextPage)),\n    selectFilm: filmId => dispatch(selectFilm(filmId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchableList);","map":{"version":3,"sources":["/home/sebastian/Desktop/StarWars-Finder/src/components/SearchableList.js"],"names":["React","useState","useRef","connect","selectCharacter","getMoreCharacters","selectFilm","makeStyles","List","ListItem","ListItemText","SearchIcon","ReactLoading","useStyles","theme","root","width","position","overflow","maxHeight","height","listSection","backgroundColor","ul","padding","SearchableList","props","inputText","setInputText","scrollTop","setScrollTop","classes","selectedSection","state","sections","next","personajes","listPersonajes","loading","charactersResults","results","filmsResults","peliculas","listPeliculas","infiniteScroll","toUpperCase","e","target","value","filteredCharacters","filter","character","name","toLowerCase","indexOf","handleSelectCharacter","characterUrl","characterId","findIndex","url","loadMoreCharacters","onScroll","scrollList","current","childtHight","firstElementChild","offsetHeight","length","parentHight","map","filteredFilms","film","title","handleSelectFilm","filmUrl","filmId","mapStateToProps","mapDispatchToProps","dispatch","nextPage"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  selectCharacter,\n  getMoreCharacters\n} from \"../redux/actions/PersonajesActions\";\nimport { selectFilm } from \"../redux/actions/PeliculasActions\";\nimport \"./styles.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ReactLoading from \"react-loading\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 536,\n    height: 400\n  },\n  listSection: {\n    backgroundColor: \"inherit\"\n  },\n  ul: {\n    backgroundColor: \"inherit\",\n    padding: 0\n  }\n}));\n\nfunction SearchableList(props) {\n  const [inputText, setInputText] = useState(\"\");\n  const [scrollTop, setScrollTop] = useState(0);\n  const classes = useStyles();\n  const { selectedSection } = props.state.sections;\n  const { next } = props.state.personajes.listPersonajes;\n  const { loading } = props.state.personajes;\n  const charactersResults = props.state.personajes.listPersonajes.results;\n  const filmsResults = props.state.peliculas.listPeliculas.results;\n  const infiniteScroll = useRef();\n\n  if (!charactersResults || !filmsResults) {\n    return (\n      <div className=\"SearchableList\">\n        <div className=\"SearchBar\">\n          <div className=\"TextSectionSelected\">\n            <h4> {selectedSection.toUpperCase()} </h4>\n          </div>\n          <div className=\"inputWithIcon\">\n            <SearchIcon className=\"icon\" />\n            <input\n              placeholder=\"Buscar\"\n              onChange={e => setInputText(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"ListItem\">\n          <ReactLoading type=\"spin\" color=\"#A9A9A9\" height={25} width={25} />\n        </div>\n      </div>\n    );\n  } else if (selectedSection === \"personajes\") {\n    let filteredCharacters = charactersResults.filter(character => {\n      return (\n        character.name.toLowerCase().indexOf(inputText.toLowerCase()) !== -1\n      );\n    });\n\n    function handleSelectCharacter(characterUrl) {\n      let characterId = charactersResults.findIndex(\n        character => character.url === characterUrl\n      );\n      props.selectCharacter(characterId);\n    }\n    const loadMoreCharacters = () => {\n      props.getMoreCharacters(next);\n    };\n    const onScroll = () => {\n      const scrollList = infiniteScroll.current.scrollTop;\n      setScrollTop(scrollList);\n     let childtHight = infiniteScroll.current.firstElementChild.offsetHeight * charactersResults.length\n     let parentHight = infiniteScroll.current.offsetHeight\n      if (\n        scrollTop + parentHight > childtHight - 40\n           && next && !loading\n      ) {\n        loadMoreCharacters();\n      }\n    };\n\n    return (\n      <div className=\"SearchableList\">\n        <div className=\"SearchBar\">\n          <div className=\"TextSectionSelected\">\n            <h4> {selectedSection.toUpperCase()} </h4>\n          </div>\n          <div className=\"inputWithIcon\">\n            <SearchIcon className=\"icon\" />\n            <input\n              placeholder=\"Buscar\"\n              onChange={e => setInputText(e.target.value)}\n            />\n          </div>\n        </div>\n        <List\n          ref={infiniteScroll}\n          component=\"nav\"\n          className={classes.root}\n          onScroll={onScroll}\n        >\n          {filteredCharacters.map(character => (\n            <ListItem button onClick={() => handleSelectCharacter(character.url)}>\n              <ListItemText inset primary={character.name} />\n            </ListItem>\n          ))}\n          {loading && (\n            <ReactLoading type=\"spin\" color=\"#A9A9A9\" height={30} width={30} />\n          )}\n        </List>\n      </div>\n    );\n  }\n  let filteredFilms = filmsResults.filter(film => {\n    return film.title.toLowerCase().indexOf(inputText.toLowerCase()) !== -1;\n  });\n  function handleSelectFilm(filmUrl) {\n    let filmId = filmsResults.findIndex(film => film.url === filmUrl);\n    props.selectFilm(filmId);\n  }\n  return (\n    <div className=\"SearchableList\">\n      <div className=\"SearchBar\">\n        <div className=\"TextSectionSelected\">\n          <h4> {selectedSection.toUpperCase()} </h4>\n        </div>\n        <div className=\"inputWithIcon\">\n          <SearchIcon className=\"icon\" />\n          <input\n            placeholder=\"Buscar\"\n            onChange={e => setInputText(e.target.value)}\n          />\n        </div>\n      </div>\n      <List component=\"nav\" className={classes.root}>\n        {filteredFilms.map(film => (\n          <ListItem button onClick={() => handleSelectFilm(film.url)}>\n            <ListItemText inset primary={film.title} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectCharacter: characterId => dispatch(selectCharacter(characterId)),\n    getMoreCharacters: nextPage => dispatch(getMoreCharacters(nextPage)),\n    selectFilm: filmId => dispatch(selectFilm(filmId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchableList);\n"]},"metadata":{},"sourceType":"module"}